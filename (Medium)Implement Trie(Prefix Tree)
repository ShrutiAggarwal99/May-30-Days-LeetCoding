// https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3329/

// Medium

class TrieNode{
private:
    vector<TrieNode* > children;
    bool isTerminal;
public:
    TrieNode(){
        for(int i=0;i<26;i++) children.push_back(NULL);
        isTerminal = false;
    }
    
    TrieNode* get(int idx){
        return children[idx];
    }
    
    void set(int idx, TrieNode* node){
        children[idx] = node;
    }
    
    bool isEnd(){
        return isTerminal;
    }
    
    void setEnd(){
        isTerminal = true;
    }
};

class Trie {
public:
    /** Initialize your data structure here. */
    TrieNode* root;
    Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* curNode = root;
        char c;
        for(int i=0;i<word.length();i++){
            c = word[i];
            if(curNode->get(c-'a') == NULL){
                TrieNode* newNode = new TrieNode();
                curNode->set(c-'a', newNode); 
            }
            curNode = curNode->get(c-'a');
        }
        curNode->setEnd();
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode* curNode = root;
        char c;
        for(int i=0;i<word.length();i++){
            c = word[i];
            if(curNode->get(c-'a') == NULL) return false;
            curNode = curNode->get(c-'a');
        }
        return curNode->isEnd();
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* curNode = root;
        char c;
        for(int i=0;i<prefix.length();i++){
            c = prefix[i];
            if(curNode->get(c-'a') == NULL) return false;
            curNode = curNode->get(c-'a');
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
 
 
 // T.C of insert() = O(len(word))
 // T.C of search() = O(len(word))
 // T.C of startsWith() = O(len(word))
